/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package SoloLexico;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.io.StringReader;
import java.nio.file.Files;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author mdelgado
 */
public class FrmAnalizador extends javax.swing.JFrame {

    /**
     * Creates new form FrmAnalizador
     */
    public FrmAnalizador() {
        initComponents();
        setLocationRelativeTo(null);
        setResizable(false);
        this.txtAnalizarLex.setEditable(false);
        setTitle("Analizador lèxico");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        BotonAnalisis = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        Resultado = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtAnalizarLex = new javax.swing.JTextArea();
        btnArchivo = new javax.swing.JButton();
        Borrar1 = new javax.swing.JButton();
        BotonAnalisisCup = new javax.swing.JButton();
        btnArchivoG = new javax.swing.JButton();
        BorrarText = new javax.swing.JButton();
        btnCargarTabla = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        BotonAnalisis.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        BotonAnalisis.setText("Análisis jFlex");
        BotonAnalisis.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonAnalisisActionPerformed(evt);
            }
        });

        Resultado.setColumns(20);
        Resultado.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        Resultado.setRows(5);
        jScrollPane1.setViewportView(Resultado);

        txtAnalizarLex.setColumns(20);
        txtAnalizarLex.setRows(5);
        jScrollPane2.setViewportView(txtAnalizarLex);

        btnArchivo.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        btnArchivo.setText("Abrir Fuente");
        btnArchivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnArchivoActionPerformed(evt);
            }
        });

        Borrar1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        Borrar1.setText("Borrar");
        Borrar1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Borrar1ActionPerformed(evt);
            }
        });

        BotonAnalisisCup.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        BotonAnalisisCup.setText("Análisis jCup");
        BotonAnalisisCup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonAnalisisCupActionPerformed(evt);
            }
        });

        btnArchivoG.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        btnArchivoG.setText("Guardar");
        btnArchivoG.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnArchivoGActionPerformed(evt);
            }
        });

        BorrarText.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        BorrarText.setText("Borrar");
        BorrarText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BorrarTextActionPerformed(evt);
            }
        });

        btnCargarTabla.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        btnCargarTabla.setText("Cargar");
        btnCargarTabla.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCargarTablaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 313, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnArchivoG, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnArchivo, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(BorrarText, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(37, 37, 37)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(BotonAnalisisCup)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnCargarTabla, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(BotonAnalisis)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 46, Short.MAX_VALUE)
                        .addComponent(Borrar1, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2))
                .addGap(73, 73, 73))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(BotonAnalisis, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(Borrar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnArchivo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(BorrarText, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BotonAnalisisCup, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnArchivoG, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnCargarTabla, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(9, 9, 9)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 474, Short.MAX_VALUE))
                .addContainerGap(40, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void analizarLexico() throws IOException {
        int cont = 1;

        String expr = (String) Resultado.getText();
        Lexico lexicos = new Lexico(new StringReader(expr));
        String resultado = "LINEA " + cont + "\t\tSIMBOLO\n";
        while (true) {
            Tokens token = lexicos.yylex();
            if (token == null) {
                txtAnalizarLex.setText(resultado);
                return;
            }
            switch (token) {
                case Linea:
                    cont++;
                    resultado += "LINEA " + cont + "\n";
                    break;
                case Comillas:
                    resultado += "  <Comillas>\t\t" + lexicos.lexemas + "\n";
                    break;
                case Cadena:
                    resultado += "  <Tipo de dato>\t" + lexicos.lexemas + "\n";
                    break;
                case T_dato:
                    resultado += "  <Tipo de dato>\t" + lexicos.lexemas + "\n";
                    break;
                case If:
                    resultado += "  <Reservada if>\t" + lexicos.lexemas + "\n";
                    break;
                case Int:
                    resultado += "  <Reservada int>\t" + lexicos.lexemas + "\n";
                    break;
                case Else:
                    resultado += "  <Reservada else>\t" + lexicos.lexemas + "\n";
                    break;
                case Do:
                    resultado += "  <Reservada do>\t" + lexicos.lexemas + "\n";
                    break;
                case While:
                    resultado += "  <Reservada while>\t" + lexicos.lexemas + "\n";
                    break;
                case For:
                    resultado += "  <Reservada while>\t" + lexicos.lexemas + "\n";
                    break;
                case Igual:
                    resultado += "  <Operador igual>\t" + lexicos.lexemas + "\n";
                    break;
                case Suma:
                    resultado += "  <Operador suma>\t" + lexicos.lexemas + "\n";
                    break;
                case Resta:
                    resultado += "  <Operador resta>\t" + lexicos.lexemas + "\n";
                    break;
                case Multiplicacion:
                    resultado += "  <Operador multiplicacion>\t" + lexicos.lexemas + "\n";
                    break;
                case Division:
                    resultado += "  <Operador division>\t" + lexicos.lexemas + "\n";
                    break;
                case Op_logico:
                    resultado += "  <Operador logico>\t" + lexicos.lexemas + "\n";
                    break;
                case Op_incremento:
                    resultado += "  <Operador incremento>\t" + lexicos.lexemas + "\n";
                    break;
                case Op_relacional:
                    resultado += "  <Operador relacional>\t" + lexicos.lexemas + "\n";
                    break;
                case Op_atribucion:
                    resultado += "  <Operador atribucion>\t" + lexicos.lexemas + "\n";
                    break;
                case Op_booleano:
                    resultado += "  <Operador booleano>\t" + lexicos.lexemas + "\n";
                    break;
                case Parent_a:
                    resultado += "  <Parentesis de apertura>\t" + lexicos.lexemas + "\n";
                    break;
                case Parent_c:
                    resultado += "  <Parentesis de cierre>\t" + lexicos.lexemas + "\n";
                    break;
                case Llave_a:
                    resultado += "  <Llave de apertura>\t" + lexicos.lexemas + "\n";
                    break;
                case Llave_c:
                    resultado += "  <Llave de cierre>\t" + lexicos.lexemas + "\n";
                    break;
                case Corchete_a:
                    resultado += "  <Corchete de apertura>\t" + lexicos.lexemas + "\n";
                    break;
                case Corchete_c:
                    resultado += "  <Corchete de cierre>\t" + lexicos.lexemas + "\n";
                    break;
                case Main:
                    resultado += "  <Reservada main>\t" + lexicos.lexemas + "\n";
                    break;
                case Void:
                    resultado += "  <Reservada void>\t" + lexicos.lexemas + "\n";
                    break;
                case P_Coma:
                    resultado += "  <Punto y coma>\t" + lexicos.lexemas + "\n";
                    break;
                case Punto:
                    resultado += "  <Punto>\t\t" + lexicos.lexemas + "\n";
                    break;
                case Coma:
                    resultado += "  <Coma>\t\t" + lexicos.lexemas + "\n";
                    break;    
                case Identificador:
                    resultado += "  <Identificador>\t\t" + lexicos.lexemas + "\n";
                    break;
                case Numero:
                    resultado += "  <Numero>\t\t" + lexicos.lexemas + "\n";
                    break;
                    
                  case Break:
                    resultado += "  <Reservada break>\t" + lexicos.lexemas + "\n";
                    break;
                    
                    case Case:
                    resultado += "  <Reservada case>\t" + lexicos.lexemas + "\n";
                    break;
                    
                    case Dos_Puntos:
                    resultado += "  <Dos Puntos>\t\t" + lexicos.lexemas+ "\n";
                    break;
                    
                    case Const:
                    resultado += "  <Reservada const>\t" + lexicos.lexemas + "\n";
                    break;
                    
                    case Continue:
                    resultado += "  <Reservada continue>\t" + lexicos.lexemas + "\n";
                    break;
                    
                    case Default:
                    resultado += "  <Reservada default>\t" + lexicos.lexemas + "\n";
                    break;
                    
                    case Enum:
                    resultado += "  <Reservada enum>\t" + lexicos.lexemas + "\n";
                    break;
                    
                    case Extern:
                    resultado += "  <Reservada extern>\t" + lexicos.lexemas + "\n";
                    break;
                    
                    case Goto:
                    resultado += "  <Reservada Goto>\t" + lexicos.lexemas + "\n";
                    break;
                    
                    case Register:
                    resultado += "  <Reservada register>\t" + lexicos.lexemas + "\n";
                    break;
                    
                    case Return:
                    resultado += "  <Reservada return>\t" + lexicos.lexemas + "\n";
                    break;
                    
                    case Union:
                    resultado += "  <Reservada union>\t" + lexicos.lexemas + "\n";
                    break;
                    
                    case Short:
                    resultado += "  <Tipo de dato>\t" + lexicos.lexemas + "\n";
                    break;
                    
                    case Unsigned:
                    resultado += "  <Tipo de dato>\t" + lexicos.lexemas + "\n";
                    break;
                    
                    case Struct:
                    resultado += "  <Reservada struct>\t" + lexicos.lexemas + "\n";
                    break;
                    
                    case Switch:
                    resultado += "  <Reservada switch>\t" + lexicos.lexemas + "\n";
                    break;
                    
                    case Typedef:
                    resultado += "  <Reservada typedef>\t" + lexicos.lexemas + "\n";
                    break;
                    
                    case Printf:
                    resultado += "  <Funcion>\t\t" + lexicos.lexemas + "\n";
                    break;
                    
                    case Scanf:
                    resultado += "  <Funcion>\t\t" + lexicos.lexemas + "\n";
                    break;
                    
                    case Cin:
                    resultado += "  <Funcion>\t\t" + lexicos.lexemas+ "\n";
                    break;
                    
                    case Cout:
                    resultado += "  <Funcion>\t\t" + lexicos.lexemas + "\n";
                    break;
                    
                    case Numeral:
                    resultado += "  <Simbolo Numeral>\t" + lexicos.lexemas + "\n";
                    break;

                    case Comentario_A:
                    resultado += "  <Apertura comentario>\t" + lexicos.lexemas + "\n";
                    break;

                    case Comentario_C:
                    resultado += "  <Cierre comentario>\t" + lexicos.lexemas + "\n";
                    break;       
                    
                   case Comentario_U:
                    String sim = lexicos.lexemas;
                    String res = Character.toString(sim.charAt(0));
                    res += Character.toString(sim.charAt(1));
                    resultado += "  <Comentario>\t\t" + res + "\n";
                    break;       
                    
                case ERROR:
                    resultado += "  <Simbolo no definido>\n";
                    break;
                default:
                    resultado += "  < " + lexicos.lexemas + " >\n";
                    break;
            }
        }

    }
    
       private void analizarLexicoCup() throws IOException {
        int cont = 1;

        String expr = (String) Resultado.getText();
        LexicoCup lexicos = new LexicoCup(new StringReader(expr));
        String resultado = "LINEA " + cont + "\t\tSIMBOLO\n";
        
        while (true) {
            Integer token = lexicos.next_token().sym;
            String simbol = lexicos.yytext();
            System.out.print(simbol+",");
            
            if (token == 0) {
                txtAnalizarLex.setText(resultado);
                return;
            }
            switch (token) {
                case sym.Linea:
                    cont++;
                    resultado += "LINEA " + cont + "\n";
                    break;
                case sym.Comillas:
                    resultado += "  <Comillas>\t\t" + "" + "\n";
                    break;
                case sym.Cadena:
                    resultado += "  <Tipo de dato>\t" + simbol + "\n";
                    break;
                case sym.T_dato:
                    resultado += "  <Tipo de dato>\t" + simbol + "\n";
                    break;
                case sym.If:
                    resultado += "  <Reservada if>\t" + simbol + "\n";
                    break;
                case sym.Int:
                    resultado += "  <Reservada int>\t" + simbol + "\n";
                    break;
                case sym.Else:
                    resultado += "  <Reservada else>\t" + simbol + "\n";
                    break;
                case sym.Do:
                    resultado += "  <Reservada do>\t" + simbol + "\n";
                    break;
                case sym.While:
                    resultado += "  <Reservada while>\t" + simbol + "\n";
                    break;
                case sym.For:
                    resultado += "  <Reservada for>\t" + simbol + "\n";
                    break;
               case sym.Void:
                    resultado += "  <Reservada void>\t" + simbol + "\n";
                    break;
                case sym.Igual:
                    resultado += "  <Operador igual>\t" + simbol + "\n";
                    break;
                case sym.Suma:
                    resultado += "  <Operador suma>\t" + simbol + "\n";
                    break;
                case sym.Resta:
                    resultado += "  <Operador resta>\t" + simbol + "\n";
                    break;
                case sym.Multiplicacion:
                    resultado += "  <Operador multiplicacion>\t" + simbol + "\n";
                    break;
                case sym.Division:
                    resultado += "  <Operador division>\t" + simbol + "\n";
                    break;
                case sym.Op_logico:
                    resultado += "  <Operador logico>\t" + simbol + "\n";
                    break;
                case sym.Op_incremento:
                    resultado += "  <Operador incremento>\t" + simbol + "\n";
                    break;
                case sym.Op_relacional:
                    resultado += "  <Operador relacional>\t" + simbol + "\n";
                    break;
                case sym.Op_atribucion:
                    resultado += "  <Operador atribucion>\t" + simbol + "\n";
                    break;
                case sym.Op_booleano:
                    resultado += "  <Operador booleano>\t" + simbol + "\n";
                    break;
                case sym.Parent_a:
                    resultado += "  <Parentesis de apertura>\t" + simbol + "\n";
                    break;
                case sym.Parent_c:
                    resultado += "  <Parentesis de cierre>\t" + simbol + "\n";
                    break;
                case sym.Llave_a:
                    resultado += "  <Llave de apertura>\t" + simbol + "\n";
                    break;
                case sym.Llave_c:
                    resultado += "  <Llave de cierre>\t" + simbol + "\n";
                    break;
                case sym.Corchete_a:
                    resultado += "  <Corchete de apertura>\t" + simbol + "\n";
                    break;
                case sym.Corchete_c:
                    resultado += "  <Corchete de cierre>\t" + simbol + "\n";
                    break;
                case sym.Main:
                    resultado += "  <Reservada main>\t" + simbol + "\n";
                    break;
                case sym.P_coma:
                    resultado += "  <Punto y coma>\t" + simbol + "\n";
                    break;
                case sym.Punto:
                    resultado += "  <Punto>\t\t" + simbol + "\n";
                    break;
                case sym.Coma:
                    resultado += "  <Coma>\t\t" + simbol + "\n";
                    break;    
                    
                case sym.Identificador:
                    resultado += "  <Identificador>\t\t" + simbol + "\n";
                    break;
                case sym.Numero:
                    resultado += "  <Numero>\t\t" + simbol + "\n";
                    break;
                    
                    case sym.Break:
                    resultado += "  <Reservada break>\t" + simbol + "\n";
                    break;
                    
                    case sym.Case:
                    resultado += "  <Reservada case>\t" + simbol + "\n";
                    break;
                    
                    case sym.Dos_Puntos:
                    resultado += "  <Dos Puntos>\t\t" + simbol + "\n";
                    break;
                    
                    case sym.Const:
                    resultado += "  <Reservada const>\t" + simbol + "\n";
                    break;
                    
                    case sym.Continue:
                    resultado += "  <Reservada continue>\t" + simbol + "\n";
                    break;
                    
                    case sym.Default:
                    resultado += "  <Reservada default>\t" + simbol + "\n";
                    break;
                    
                    case sym.Enum:
                    resultado += "  <Reservada enum>\t" + simbol + "\n";
                    break;
                    
                    case sym.Extern:
                    resultado += "  <Reservada extern>\t" + simbol + "\n";
                    break;
                    
                    case sym.Goto:
                    resultado += "  <Reservada Goto>\t" + simbol + "\n";
                    break;
                    
                    case sym.Register:
                    resultado += "  <Reservada register>\t" + simbol + "\n";
                    break;
                    
                    case sym.Return:
                    resultado += "  <Reservada return>\t" + simbol + "\n";
                    break;
                    
                    case sym.Union:
                    resultado += "  <Reservada union>\t" + simbol + "\n";
                    break;
                    
                    case sym.Short:
                    resultado += "  <Tipo de dato>\t" + simbol + "\n";
                    break;
                    
                    case sym.Unsigned:
                    resultado += "  <Tipo de dato>\t" + simbol + "\n";
                    break;
                    
                    case sym.Struct:
                    resultado += "  <Reservada struct>\t" + simbol + "\n";
                    break;
                    
                    case sym.Switch:
                    resultado += "  <Reservada switch>\t" + simbol + "\n";
                    break;
                    
                    case sym.Typedef:
                    resultado += "  <Reservada typedef>\t" + simbol + "\n";
                    break;
                    
                    case sym.Printf:
                    resultado += "  <Funcion>\t\t" + simbol + "\n";
                    break;
                    
                    case sym.Scanf:
                    resultado += "  <Funcion>\t\t" + simbol + "\n";
                    break;
                    
                    case sym.Cin:
                    resultado += "  <Funcion>\t\t" + simbol + "\n";
                    break;
                    
                    case sym.Cout:
                    resultado += "  <Funcion>\t\t" + simbol + "\n";
                    break;
                    
                    case sym.Numeral:
                    resultado += "  <Simbolo Numeral>\t" + simbol + "\n";
                    break;

                    case sym.Comentario_A:
                    resultado += "  <Apertura comentario>\t" + simbol + "\n";
                    break;

                    case sym.Comentario_C:
                    resultado += "  <Cierre comentario>\t" + simbol + "\n";
                    break;

                    case sym.Comentario_U:
                    String sim = simbol;
                    String res = Character.toString(sim.charAt(0));
                    res += Character.toString(sim.charAt(1));
                    resultado += "  <Comentario>\t\t" + res + "\n";
                    break;                    
                case ERROR:
                    resultado += "  <Simbolo no definido>\n";
                    break;
                default:
                    resultado += "  < " + simbol + " >\n";
                    break;
            }
        }
        

    }
       

    private void BotonAnalisisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonAnalisisActionPerformed
        try {
            analizarLexico();
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null,"El anàlisis lèxico de JFlex ha fallado","Error",2);
        }
    }//GEN-LAST:event_BotonAnalisisActionPerformed

    private void btnArchivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnArchivoActionPerformed
        int cont = 1;
        
        JFileChooser escoger = new JFileChooser();
        escoger.showOpenDialog(null);
      
        try {
             File arc = new File(escoger.getSelectedFile().getAbsolutePath());
            String ST = new String(Files.readAllBytes(arc.toPath()));
            Resultado.setText(ST);
            JOptionPane.showMessageDialog(null,"Archivo leido","Aviso",1);
        } catch (FileNotFoundException ex) {
            JOptionPane.showMessageDialog(null,"El archivo no ha sido encontrado","Error",2);
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null,"Error al abrir el archivo","Error",2);
        }catch(NullPointerException ex){}
        
    }//GEN-LAST:event_btnArchivoActionPerformed

    private void Borrar1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Borrar1ActionPerformed
        txtAnalizarLex.setText(null);
    }//GEN-LAST:event_Borrar1ActionPerformed

    private void BotonAnalisisCupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonAnalisisCupActionPerformed
        try {
            analizarLexicoCup();
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null,"El anàlisis lèxico de JCup ha fallado","Error",2);
        }
    }//GEN-LAST:event_BotonAnalisisCupActionPerformed

    private void btnArchivoGActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnArchivoGActionPerformed
        JFileChooser guardar = new JFileChooser();
        guardar.showOpenDialog(null);
        FileWriter escribir;       

        try {   
            File arc = new File(guardar.getSelectedFile().getAbsolutePath());
            arc.delete();
            arc.createNewFile();
         
            escribir = new FileWriter(arc, true);
            escribir.write(Resultado.getText());
            escribir.close();
            JOptionPane.showMessageDialog(null,"El archivo ha sido guardado","Aviso",1);
        } catch (FileNotFoundException ex) {
            JOptionPane.showMessageDialog(null,"El archivo no ha sido encontrado","Error",2);
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null,"Error al guardar el archivo","Error",2);
        }catch(NullPointerException ex){}
    }//GEN-LAST:event_btnArchivoGActionPerformed

    private void BorrarTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BorrarTextActionPerformed
        Resultado.setText(null);
    }//GEN-LAST:event_BorrarTextActionPerformed

    private void btnCargarTablaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCargarTablaActionPerformed
        try {
            AnalizadorLexico lex = new AnalizadorLexico();
            String caminoJFLEX= "../SoloLexico/src/SoloLexico/Lexico.flex";
            String caminoJCUP= "../SoloLexico/src/SoloLexico/LexicoCup.flex";
            String[] caminoSCUP= {"-parser","Sintax","../SoloLexico/src/SoloLexico/Sintax.cup"};
            lex.generarLex(caminoJFLEX, caminoJCUP, caminoSCUP);
            JOptionPane.showMessageDialog(null, "Tablas de simbolos cargadas correctamente", "Aviso",1);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Ha ocurrido un error al cargar las tablas de simbolos","Error",0);
        }
    }//GEN-LAST:event_btnCargarTablaActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmAnalizador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmAnalizador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmAnalizador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmAnalizador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrmAnalizador().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Borrar1;
    private javax.swing.JButton BorrarText;
    private javax.swing.JButton BotonAnalisis;
    private javax.swing.JButton BotonAnalisisCup;
    private javax.swing.JTextArea Resultado;
    private javax.swing.JButton btnArchivo;
    private javax.swing.JButton btnArchivoG;
    private javax.swing.JButton btnCargarTabla;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea txtAnalizarLex;
    // End of variables declaration//GEN-END:variables
}
