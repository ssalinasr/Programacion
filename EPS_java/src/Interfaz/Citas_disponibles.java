/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interfaz;

import BD.ConsultasBD;
import java.awt.Color;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author FliaSalinasRodriguez
 */
public class Citas_disponibles extends javax.swing.JFrame {

    private String tipo;
    private int num;
    private String tipo_cita;
    
    /**
     * 
     * Creates new form Citas_disponibles
     */
    public Citas_disponibles(String tipo, int num, String tipo_cita) throws SQLException{
        initComponents();
        setLocationRelativeTo(null);
        this.tipo = tipo;
        this.num = num;
        this.tipo_cita = tipo_cita;
        table(tipo,num,tipo_cita);
        
    }

    public String getTipo() {
        return tipo;
    }

    public void setTipo(String tipo) {
        this.tipo = tipo;
    }

    public int getNum() {
        return num;
    }

    public void setNum(int num) {
        this.num = num;
    }

    public String getTipo_cita() {
        return tipo_cita;
    }

    public void setTipo_cita(String tipo_cita) {
        this.tipo_cita = tipo_cita;
    }
    
    
    
    public void table(String tipo, int num, String tipo_cita) throws SQLException{
        DefaultTableModel model = new DefaultTableModel(){
            @Override
            public boolean isCellEditable(int row, int column){
                return false;
            }
        };
        
        String[] columnas = new String[5];
        columnas[0]="ID cita";
        columnas[1]="Fecha cita";
        columnas[2]="Médico";
        columnas[3]="Hora";
        columnas[4]="Especialidad";
        model.setColumnIdentifiers(columnas);
        
        ConsultasBD bd = new ConsultasBD();
        ResultSet citas = bd.obtenerCitas(tipo_cita);
        ResultSet usu = null;
        ResultSet med = null;
        ResultSet esp = null;
        String[] fila = new String[5];
        String fecha = "";
        String nombre = "";
        String hora = "";
        String especialidad = "";
        String id_cita = "";
        
        while(citas.next()){
            ResultSet age = bd.obtenerAgendaId(citas.getInt("k_id_agenda"));
            fecha = citas.getInt("q_año")+"-"+citas.getInt("q_mes")+"-"+citas.getInt("q_dia");
            hora = citas.getTime("f_hora_inicial")+"";
            id_cita = Integer.toString(citas.getInt("k_id_cita"));
            while(age.next()){
            usu = bd.obtenerUsuario(age.getInt("k_id_medico"));
            med = bd.obtenerMedico(age.getInt("k_id_medico"));
            while(med.next()){
                esp = bd.obtenerEspecialidad(med.getInt("k_id_especialidad"));
            }
            }  
            while(usu.next()){
            nombre = usu.getString("n_nombre") + " " + usu.getString("n_apellido");
            }
            while(esp.next()){
            especialidad = esp.getString("n_nombre_esp");
            }
            
            
            if(citas.getString("i_tipo_cita").equals(tipo_cita) && citas.getString("i_estado_cita").equals("DISPONIBLE")){
                fila[0] = id_cita;
                fila[1] = fecha;
                fila[2] = nombre;
                fila[3] = hora;
                fila[4] = especialidad;
            }
         

            model.addRow(fila);
        }
        
        this.TblCitas.setModel(model);
        this.TblCitas.setRowHeight(45);
        this.TblCitas.setGridColor(Color.BLACK);
        
        DefaultTableCellRenderer tcr = new DefaultTableCellRenderer();
        tcr.setVerticalAlignment(SwingConstants.TOP);
        tcr.setHorizontalAlignment(SwingConstants.LEFT);
        tcr.setBorder(null);
        
        this.TblCitas.getColumnModel().getColumn(0).setCellRenderer(tcr);
        this.TblCitas.getColumnModel().getColumn(1).setCellRenderer(tcr);
        this.TblCitas.getColumnModel().getColumn(2).setCellRenderer(tcr);
        this.TblCitas.getColumnModel().getColumn(3).setCellRenderer(tcr);
        this.TblCitas.getColumnModel().getColumn(4).setCellRenderer(tcr);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        TblCitas = new javax.swing.JTable();
        BtnSolicitar = new javax.swing.JButton();
        BtnCancelar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        TblCitas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(TblCitas);

        BtnSolicitar.setText("Solicitar");
        BtnSolicitar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnSolicitarActionPerformed(evt);
            }
        });

        BtnCancelar.setText("Cancelar");
        BtnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnCancelarActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel1.setText("Citas disponibles");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(BtnCancelar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 215, Short.MAX_VALUE)
                        .addComponent(BtnSolicitar)
                        .addGap(25, 25, 25))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 26, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BtnSolicitar)
                    .addComponent(BtnCancelar))
                .addGap(9, 9, 9))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BtnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnCancelarActionPerformed
        Solicitar_cita sc = new Solicitar_cita();
        sc.setVisible(true);
        dispose();
    }//GEN-LAST:event_BtnCancelarActionPerformed

    private void BtnSolicitarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnSolicitarActionPerformed
        Icon check = new ImageIcon(getClass().getResource("/interfaz/Check.png"));
        Icon cross = new ImageIcon(getClass().getResource("/interfaz/Cross.png"));
        int copago = 0;
        try {
            ConsultasBD bd = new ConsultasBD();
            ResultSet usu = bd.obtenerPaciente(this.num);
            while(usu.next()){
                if(usu.getString("k_id_categoria").equals("CAT1")){
                    copago = 5000;
                }
                else{
                    copago = 7000;
                }
            }
            
            
            int fila_selec = this.TblCitas.getSelectedRow();
            int id = Integer.parseInt(this.TblCitas.getModel().getValueAt(fila_selec, 0)+"");
            System.out.println(id);
            
            ResultSet cita = bd.obtenerCitasId(id);
            while(cita.next()){
            bd.actualizarCita(this.getNum(), this.getTipo(), copago, "NO DISPONIBLE", cita.getInt("k_id_cita"));
            JOptionPane.showMessageDialog(null, "Cita asignada", "Asignar cita médica", JOptionPane.INFORMATION_MESSAGE, check);
            ResultSet res = bd.consultarCitaCop(cita.getInt("k_id_cita"));
            while(res.next()){
                JOptionPane.showMessageDialog(null, "Su copago es: $"+ res.getInt("q_copago"), "Info", 1);
            }
            MenuPaciente mp = new MenuPaciente();
            mp.setVisible(true);
            dispose(); 
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Cita no asignada", "Asignar cita médica", JOptionPane.INFORMATION_MESSAGE, cross);
            System.out.println("Error SQL :v");
            System.out.println(ex);
        }
                
        
    }//GEN-LAST:event_BtnSolicitarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Citas_disponibles.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Citas_disponibles.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Citas_disponibles.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Citas_disponibles.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new Citas_disponibles("CÉDULA CIUDADANIA",91042863,"PRIORITARIA").setVisible(true);
                } catch (SQLException ex) {
                    System.out.println("Error SQL :v");
                    System.out.println(ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BtnCancelar;
    private javax.swing.JButton BtnSolicitar;
    private javax.swing.JTable TblCitas;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
